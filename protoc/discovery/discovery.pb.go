// Code generated by protoc-gen-go. DO NOT EDIT.
// source: discovery.proto

package registry

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// we define what a registration needs to have
// all optional and self explanatory
type Registration struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ipv4                 string   `protobuf:"bytes,2,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Port                 string   `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Registration) Reset()         { *m = Registration{} }
func (m *Registration) String() string { return proto.CompactTextString(m) }
func (*Registration) ProtoMessage()    {}
func (*Registration) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e7ff60feb39c8d0, []int{0}
}

func (m *Registration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Registration.Unmarshal(m, b)
}
func (m *Registration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Registration.Marshal(b, m, deterministic)
}
func (m *Registration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Registration.Merge(m, src)
}
func (m *Registration) XXX_Size() int {
	return xxx_messageInfo_Registration.Size(m)
}
func (m *Registration) XXX_DiscardUnknown() {
	xxx_messageInfo_Registration.DiscardUnknown(m)
}

var xxx_messageInfo_Registration proto.InternalMessageInfo

func (m *Registration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Registration) GetIpv4() string {
	if m != nil {
		return m.Ipv4
	}
	return ""
}

func (m *Registration) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

// a list/array of registrations
type RegistrationList struct {
	Registrations        []*Registration `protobuf:"bytes,1,rep,name=registrations,proto3" json:"registrations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RegistrationList) Reset()         { *m = RegistrationList{} }
func (m *RegistrationList) String() string { return proto.CompactTextString(m) }
func (*RegistrationList) ProtoMessage()    {}
func (*RegistrationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e7ff60feb39c8d0, []int{1}
}

func (m *RegistrationList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationList.Unmarshal(m, b)
}
func (m *RegistrationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationList.Marshal(b, m, deterministic)
}
func (m *RegistrationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationList.Merge(m, src)
}
func (m *RegistrationList) XXX_Size() int {
	return xxx_messageInfo_RegistrationList.Size(m)
}
func (m *RegistrationList) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationList.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationList proto.InternalMessageInfo

func (m *RegistrationList) GetRegistrations() []*Registration {
	if m != nil {
		return m.Registrations
	}
	return nil
}

// w/ this message we define what the server needs
// to know what you want to have
type RegistrationFetchRequest struct {
	Registrations        []*Registration `protobuf:"bytes,1,rep,name=registrations,proto3" json:"registrations,omitempty"`
	FetchAll             bool            `protobuf:"varint,2,opt,name=fetchAll,proto3" json:"fetchAll,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RegistrationFetchRequest) Reset()         { *m = RegistrationFetchRequest{} }
func (m *RegistrationFetchRequest) String() string { return proto.CompactTextString(m) }
func (*RegistrationFetchRequest) ProtoMessage()    {}
func (*RegistrationFetchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e7ff60feb39c8d0, []int{2}
}

func (m *RegistrationFetchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationFetchRequest.Unmarshal(m, b)
}
func (m *RegistrationFetchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationFetchRequest.Marshal(b, m, deterministic)
}
func (m *RegistrationFetchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationFetchRequest.Merge(m, src)
}
func (m *RegistrationFetchRequest) XXX_Size() int {
	return xxx_messageInfo_RegistrationFetchRequest.Size(m)
}
func (m *RegistrationFetchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationFetchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationFetchRequest proto.InternalMessageInfo

func (m *RegistrationFetchRequest) GetRegistrations() []*Registration {
	if m != nil {
		return m.Registrations
	}
	return nil
}

func (m *RegistrationFetchRequest) GetFetchAll() bool {
	if m != nil {
		return m.FetchAll
	}
	return false
}

// simple response when you sign up
type RegisterResponse struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegisterResponse) Reset()         { *m = RegisterResponse{} }
func (m *RegisterResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterResponse) ProtoMessage()    {}
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e7ff60feb39c8d0, []int{3}
}

func (m *RegisterResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegisterResponse.Unmarshal(m, b)
}
func (m *RegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegisterResponse.Marshal(b, m, deterministic)
}
func (m *RegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterResponse.Merge(m, src)
}
func (m *RegisterResponse) XXX_Size() int {
	return xxx_messageInfo_RegisterResponse.Size(m)
}
func (m *RegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterResponse proto.InternalMessageInfo

func (m *RegisterResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Registration)(nil), "registry.Registration")
	proto.RegisterType((*RegistrationList)(nil), "registry.RegistrationList")
	proto.RegisterType((*RegistrationFetchRequest)(nil), "registry.RegistrationFetchRequest")
	proto.RegisterType((*RegisterResponse)(nil), "registry.RegisterResponse")
}

func init() { proto.RegisterFile("discovery.proto", fileDescriptor_1e7ff60feb39c8d0) }

var fileDescriptor_1e7ff60feb39c8d0 = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0x86, 0x15, 0x8a, 0x20, 0x1c, 0x20, 0x90, 0x85, 0x90, 0x95, 0xa9, 0xf2, 0xd4, 0x01, 0x65,
	0x28, 0x8c, 0x08, 0xc1, 0xc2, 0x80, 0x3a, 0x20, 0x23, 0xd8, 0x43, 0x38, 0x8a, 0xa5, 0x36, 0x0e,
	0x77, 0x26, 0x52, 0xfe, 0x2f, 0x3f, 0x04, 0x39, 0xc6, 0x60, 0x3e, 0x3a, 0x75, 0x7b, 0xef, 0xb5,
	0xfd, 0xdc, 0x97, 0xe1, 0xe0, 0xc9, 0x70, 0x6d, 0x3b, 0xa4, 0xbe, 0x6c, 0xc9, 0x3a, 0x2b, 0x72,
	0xc2, 0xb9, 0x61, 0x47, 0xbd, 0xba, 0x81, 0x3d, 0x1d, 0x74, 0xe5, 0x8c, 0x6d, 0x84, 0x80, 0xcd,
	0xa6, 0x5a, 0xa2, 0xcc, 0xc6, 0xd9, 0x64, 0x47, 0x0f, 0xda, 0x7b, 0xa6, 0xed, 0xce, 0xe4, 0x46,
	0xf0, 0xbc, 0xf6, 0x5e, 0x6b, 0xc9, 0xc9, 0x51, 0xf0, 0xbc, 0x56, 0xb7, 0x70, 0x98, 0xb2, 0x66,
	0x86, 0x9d, 0x38, 0x87, 0x7d, 0x4a, 0x3c, 0x96, 0xd9, 0x78, 0x34, 0xd9, 0x9d, 0x1e, 0x97, 0xb1,
	0x82, 0x32, 0x7d, 0xa2, 0x7f, 0x5e, 0x56, 0x0e, 0x64, 0x7a, 0x7c, 0x8d, 0xae, 0x7e, 0xd1, 0xf8,
	0xfa, 0x86, 0xeb, 0x92, 0x45, 0x01, 0xf9, 0xb3, 0xa7, 0x5d, 0x2d, 0x16, 0x43, 0x5f, 0xb9, 0xfe,
	0x8a, 0xd5, 0x49, 0xec, 0x03, 0x49, 0x23, 0xb7, 0xb6, 0x61, 0x14, 0x12, 0xb6, 0x97, 0xc8, 0x5c,
	0xcd, 0xe3, 0x68, 0x62, 0x38, 0x7d, 0xcf, 0x20, 0xff, 0xcc, 0xd4, 0x8b, 0x8b, 0xa8, 0x91, 0xc4,
	0x8a, 0x4a, 0x8a, 0xe2, 0xb7, 0x9f, 0xa4, 0xb9, 0x04, 0xb8, 0x6f, 0x68, 0x1d, 0xc2, 0x03, 0x1c,
	0x0d, 0x8d, 0xdc, 0x21, 0x75, 0xa6, 0xc6, 0x99, 0xad, 0xc3, 0x62, 0xd5, 0xff, 0xac, 0x74, 0xa4,
	0x7f, 0xb9, 0xdf, 0x8b, 0x7c, 0xdc, 0x1a, 0x7e, 0xce, 0xe9, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xab, 0xd3, 0x61, 0xa9, 0x4c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegistryClient interface {
	Register(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*RegisterResponse, error)
	Unregister(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*RegisterResponse, error)
	FetchServiceLocation(ctx context.Context, in *RegistrationFetchRequest, opts ...grpc.CallOption) (*RegistrationList, error)
}

type registryClient struct {
	cc *grpc.ClientConn
}

func NewRegistryClient(cc *grpc.ClientConn) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) Register(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) Unregister(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/registry.Registry/Unregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) FetchServiceLocation(ctx context.Context, in *RegistrationFetchRequest, opts ...grpc.CallOption) (*RegistrationList, error) {
	out := new(RegistrationList)
	err := c.cc.Invoke(ctx, "/registry.Registry/fetchServiceLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
type RegistryServer interface {
	Register(context.Context, *Registration) (*RegisterResponse, error)
	Unregister(context.Context, *Registration) (*RegisterResponse, error)
	FetchServiceLocation(context.Context, *RegistrationFetchRequest) (*RegistrationList, error)
}

func RegisterRegistryServer(s *grpc.Server, srv RegistryServer) {
	s.RegisterService(&_Registry_serviceDesc, srv)
}

func _Registry_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Register(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/Unregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).Unregister(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_FetchServiceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationFetchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).FetchServiceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registry.Registry/FetchServiceLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).FetchServiceLocation(ctx, req.(*RegistrationFetchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registry_serviceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Registry_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _Registry_Unregister_Handler,
		},
		{
			MethodName: "fetchServiceLocation",
			Handler:    _Registry_FetchServiceLocation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "discovery.proto",
}
